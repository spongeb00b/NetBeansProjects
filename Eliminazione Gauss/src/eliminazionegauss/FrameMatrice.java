/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrameMatrice.java
 *
 * Created on 5-mag-2011, 19.20.39
 */
package eliminazionegauss;

import java.awt.*;
import java.io.*;

/**
 *
 * @author raffaele
 */
public class FrameMatrice extends javax.swing.JFrame {

    public static Matrice arrayMatriceCalcolo[] = new Matrice[2];
    public String errore = "";
    int righe;
    int colonne;
    public static MatrixCanvas[] canvas = new MatrixCanvas[1];
    public static int zetaP = 1;

    public FrameMatrice() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selezionaFile = new javax.swing.JFileChooser();
        dialog = new javax.swing.JDialog();
        labelDialog = new javax.swing.JLabel();
        iconaLabelProd = new javax.swing.JLabel();
        bottoneOk = new javax.swing.JButton();
        dialogRiepilogo = new javax.swing.JDialog();
        titoloRiepilogo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorRiepilogo = new javax.swing.JEditorPane();
        salvaProprietà = new javax.swing.JButton();
        gruppoRadioDominio = new javax.swing.ButtonGroup();
        dialogAiuto = new javax.swing.JDialog();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        editorAiuto = new javax.swing.JEditorPane();
        DimMatrice = new javax.swing.JLabel();
        CampoRighe = new javax.swing.JTextField();
        CampoColonne = new javax.swing.JTextField();
        LabelRighe = new javax.swing.JLabel();
        LabelColonne = new javax.swing.JLabel();
        BottoneCrea = new javax.swing.JButton();
        ErroreMsg = new javax.swing.JLabel();
        inversa = new javax.swing.JButton();
        trasposta = new javax.swing.JButton();
        gauss = new javax.swing.JButton();
        determinante = new javax.swing.JButton();
        ToggleProprietà = new javax.swing.JToggleButton();
        labelIconaRazionali = new javax.swing.JLabel();
        labelDominio = new javax.swing.JLabel();
        radioRazionali = new javax.swing.JRadioButton();
        radioZetaP = new javax.swing.JRadioButton();
        labelInteri = new javax.swing.JLabel();
        areaTestoPrimo = new javax.swing.JTextField();
        labelNumPrimo = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        moltiplica = new javax.swing.JToggleButton();
        modifica = new javax.swing.JButton();
        casuale = new javax.swing.JButton();
        toggleSomma = new javax.swing.JToggleButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        itemApri = new javax.swing.JMenuItem();
        itemSalva = new javax.swing.JMenuItem();
        modificaMenu = new javax.swing.JMenu();
        itemModifica = new javax.swing.JMenuItem();
        itemDeterminante = new javax.swing.JMenuItem();
        itemInversa = new javax.swing.JMenuItem();
        itemTrasposta = new javax.swing.JMenuItem();
        itemGauss = new javax.swing.JMenuItem();
        itemSomma = new javax.swing.JMenuItem();
        itemProdotto = new javax.swing.JMenuItem();
        itemCasuale = new javax.swing.JMenuItem();
        itemProprietà = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        itemRazionali = new javax.swing.JMenuItem();
        itemZetaP = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        itemAiuto = new javax.swing.JMenuItem();

        dialog.setAlwaysOnTop(true);
        dialog.setName("dialog"); // NOI18N
        dialog.setResizable(false);

        labelDialog.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        iconaLabelProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/matrixIconDialog.jpg"))); // NOI18N

        bottoneOk.setText("OK");
        bottoneOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());
        dialog.getContentPane().setLayout(dialogLayout);
        dialogLayout.setHorizontalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconaLabelProd)
                .addGroup(dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(labelDialog, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(bottoneOk, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dialogLayout.setVerticalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addComponent(labelDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bottoneOk, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(iconaLabelProd, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        dialogRiepilogo.setTitle("Proprietà matrice");
        dialogRiepilogo.setAlwaysOnTop(true);
        dialogRiepilogo.setBounds(new java.awt.Rectangle(932, 253, 345, 500));
        dialogRiepilogo.setResizable(false);
        dialogRiepilogo.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogRiepilogoWindowClosing(evt);
            }
        });

        titoloRiepilogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titoloRiepilogo.setText("Riepilogo proprietà matrice");

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setAlignmentX(0.0F);
        jScrollPane1.setAlignmentY(0.0F);
        jScrollPane1.setAutoscrolls(true);

        editorRiepilogo.setEditable(false);
        editorRiepilogo.setText("Seleziona una matrice per le proprietà");
        jScrollPane1.setViewportView(editorRiepilogo);

        salvaProprietà.setText("Salva");
        salvaProprietà.setEnabled(false);
        salvaProprietà.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaProprietàActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogRiepilogoLayout = new javax.swing.GroupLayout(dialogRiepilogo.getContentPane());
        dialogRiepilogo.getContentPane().setLayout(dialogRiepilogoLayout);
        dialogRiepilogoLayout.setHorizontalGroup(
            dialogRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogRiepilogoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dialogRiepilogoLayout.createSequentialGroup()
                        .addComponent(titoloRiepilogo, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(salvaProprietà, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dialogRiepilogoLayout.setVerticalGroup(
            dialogRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogRiepilogoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titoloRiepilogo)
                    .addComponent(salvaProprietà))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        dialogAiuto.setAlwaysOnTop(true);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Guida");

        jScrollPane2.setAutoscrolls(true);

        editorAiuto.setEditable(false);
        jScrollPane2.setViewportView(editorAiuto);

        javax.swing.GroupLayout dialogAiutoLayout = new javax.swing.GroupLayout(dialogAiuto.getContentPane());
        dialogAiuto.getContentPane().setLayout(dialogAiutoLayout);
        dialogAiutoLayout.setHorizontalGroup(
            dialogAiutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAiutoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogAiutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        dialogAiutoLayout.setVerticalGroup(
            dialogAiutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAiutoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MatrixMe! v0.1 ");
        setBackground(new java.awt.Color(231, 231, 231));
        setBounds(new java.awt.Rectangle(280, 0, 629, 1000));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Kinnari", 0, 12)); // NOI18N
        setForeground(java.awt.Color.darkGray);
        setState(2);

        DimMatrice.setText("dimensiona la matrice da creare: ");

        CampoRighe.setText("0");
        CampoRighe.setSelectionStart(11);
        CampoRighe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoRigheActionPerformed(evt);
            }
        });
        CampoRighe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoRigheFocusGained(evt);
            }
        });

        CampoColonne.setText("0");
        CampoColonne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoColonneActionPerformed(evt);
            }
        });
        CampoColonne.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoColonneFocusGained(evt);
            }
        });

        LabelRighe.setText("N. Righe:");

        LabelColonne.setText("N.Colonne:");

        BottoneCrea.setText("CREA!");
        BottoneCrea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottoneCreaActionPerformed(evt);
            }
        });

        ErroreMsg.setForeground(new java.awt.Color(254, 18, 25));
        ErroreMsg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ErroreMsg.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ErroreMsg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        inversa.setText("Inversa");
        inversa.setEnabled(false);
        inversa.setPreferredSize(new java.awt.Dimension(75, 29));
        inversa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversaActionPerformed(evt);
            }
        });

        trasposta.setText("Trasposta");
        trasposta.setEnabled(false);
        trasposta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traspostaActionPerformed(evt);
            }
        });

        gauss.setText("Gauss");
        gauss.setEnabled(false);
        gauss.setPreferredSize(new java.awt.Dimension(75, 29));
        gauss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussActionPerformed(evt);
            }
        });

        determinante.setText("Determinante");
        determinante.setEnabled(false);
        determinante.setPreferredSize(new java.awt.Dimension(90, 29));
        determinante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                determinanteActionPerformed(evt);
            }
        });

        ToggleProprietà.setText("Proprietà ");
        ToggleProprietà.setEnabled(false);
        ToggleProprietà.setPreferredSize(new java.awt.Dimension(75, 29));
        ToggleProprietà.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleProprietàActionPerformed(evt);
            }
        });

        labelIconaRazionali.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/razionali.jpg"))); // NOI18N

        labelDominio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDominio.setText("Seleziona il dominio:");

        gruppoRadioDominio.add(radioRazionali);
        radioRazionali.setSelected(true);
        radioRazionali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioRazionaliActionPerformed(evt);
            }
        });

        gruppoRadioDominio.add(radioZetaP);
        radioZetaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioZetaPActionPerformed(evt);
            }
        });

        labelInteri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/interi.jpg"))); // NOI18N

        areaTestoPrimo.setEditable(false);
        areaTestoPrimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaTestoPrimoActionPerformed(evt);
            }
        });
        areaTestoPrimo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                areaTestoPrimoFocusGained(evt);
            }
        });

        labelNumPrimo.setText("Inserisci un numero primo:");

        moltiplica.setText("Prodotto RxC");
        moltiplica.setEnabled(false);
        moltiplica.setPreferredSize(new java.awt.Dimension(75, 29));
        moltiplica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moltiplicaActionPerformed(evt);
            }
        });

        modifica.setText("Modifica");
        modifica.setEnabled(false);
        modifica.setPreferredSize(new java.awt.Dimension(75, 29));
        modifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaActionPerformed(evt);
            }
        });

        casuale.setText("Casuale");
        casuale.setPreferredSize(new java.awt.Dimension(75, 29));
        casuale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                casualeActionPerformed(evt);
            }
        });

        toggleSomma.setText("Somma");
        toggleSomma.setEnabled(false);
        toggleSomma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleSommaActionPerformed(evt);
            }
        });

        jSlider1.setMaximum(10);
        jSlider1.setValue(0);

        jLabel1.setText("interi");

        jLabel2.setText("frazioni");

        menuFile.setText("File");

        itemApri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/apri.jpeg"))); // NOI18N
        itemApri.setText("Apri");
        itemApri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemApriActionPerformed(evt);
            }
        });
        menuFile.add(itemApri);

        itemSalva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/salva.jpeg"))); // NOI18N
        itemSalva.setText("Salva");
        itemSalva.setEnabled(false);
        itemSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalvaActionPerformed(evt);
            }
        });
        menuFile.add(itemSalva);

        jMenuBar1.add(menuFile);

        modificaMenu.setText("Modifica");

        itemModifica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/modifica.jpeg"))); // NOI18N
        itemModifica.setText("Modifica");
        itemModifica.setEnabled(false);
        itemModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemModificaActionPerformed(evt);
            }
        });
        modificaMenu.add(itemModifica);

        itemDeterminante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/det.jpeg"))); // NOI18N
        itemDeterminante.setText("Determinante");
        itemDeterminante.setEnabled(false);
        itemDeterminante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDeterminanteActionPerformed(evt);
            }
        });
        modificaMenu.add(itemDeterminante);

        itemInversa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/inversa.jpeg"))); // NOI18N
        itemInversa.setText("Inversa");
        itemInversa.setEnabled(false);
        itemInversa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemInversaActionPerformed(evt);
            }
        });
        modificaMenu.add(itemInversa);

        itemTrasposta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/trasposta.jpeg"))); // NOI18N
        itemTrasposta.setText("Trasposta");
        itemTrasposta.setEnabled(false);
        itemTrasposta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTraspostaActionPerformed(evt);
            }
        });
        modificaMenu.add(itemTrasposta);

        itemGauss.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/gauss.jpeg"))); // NOI18N
        itemGauss.setText("Gauss");
        itemGauss.setEnabled(false);
        itemGauss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGaussActionPerformed(evt);
            }
        });
        modificaMenu.add(itemGauss);

        itemSomma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/somma.jpeg"))); // NOI18N
        itemSomma.setText("Somma");
        itemSomma.setEnabled(false);
        itemSomma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSommaActionPerformed(evt);
            }
        });
        modificaMenu.add(itemSomma);

        itemProdotto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/prodotto.jpeg"))); // NOI18N
        itemProdotto.setText("Prodotto RxC");
        itemProdotto.setEnabled(false);
        itemProdotto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemProdottoActionPerformed(evt);
            }
        });
        modificaMenu.add(itemProdotto);

        itemCasuale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/images.jpeg"))); // NOI18N
        itemCasuale.setText("Casuale");
        itemCasuale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCasualeActionPerformed(evt);
            }
        });
        modificaMenu.add(itemCasuale);

        itemProprietà.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/proprietà.jpeg"))); // NOI18N
        itemProprietà.setText("Proprietà");
        itemProprietà.setEnabled(false);
        itemProprietà.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemProprietàActionPerformed(evt);
            }
        });
        modificaMenu.add(itemProprietà);

        jMenuBar1.add(modificaMenu);

        jMenu1.setText("Dominio");

        itemRazionali.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/razionali.jpg"))); // NOI18N
        itemRazionali.setText("Razionali");
        itemRazionali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRazionaliActionPerformed(evt);
            }
        });
        jMenu1.add(itemRazionali);

        itemZetaP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/interi.jpg"))); // NOI18N
        itemZetaP.setText("Congruenze Modulo p");
        itemZetaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZetaPActionPerformed(evt);
            }
        });
        jMenu1.add(itemZetaP);

        jMenuBar1.add(jMenu1);

        helpMenu.setText("?");

        itemAiuto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eliminazionegauss/icons/sos.jpeg"))); // NOI18N
        itemAiuto.setText("Aiuto");
        itemAiuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAiutoActionPerformed(evt);
            }
        });
        helpMenu.add(itemAiuto);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 1260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(DimMatrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LabelRighe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CampoRighe, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(LabelColonne)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CampoColonne, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(BottoneCrea, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(modifica, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(determinante, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inversa, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(trasposta, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gauss, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleSomma, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moltiplica, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(casuale, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ToggleProprietà, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelIconaRazionali)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelDominio, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(152, 152, 152)
                                            .addComponent(radioRazionali))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelInteri)
                                    .addComponent(radioZetaP))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelNumPrimo, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(areaTestoPrimo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(82, 82, 82)
                                .addComponent(ErroreMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2))
                                    .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(29, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LabelRighe)
                        .addComponent(CampoRighe)
                        .addComponent(LabelColonne)
                        .addComponent(CampoColonne)
                        .addComponent(BottoneCrea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(DimMatrice))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(determinante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inversa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trasposta, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gauss, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moltiplica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(casuale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToggleProprietà, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleSomma, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioRazionali)
                            .addComponent(labelDominio)
                            .addComponent(radioZetaP)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ErroreMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelNumPrimo)
                                    .addComponent(areaTestoPrimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(labelInteri, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelIconaRazionali)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(736, 736, 736))
        );

        getAccessibleContext().setAccessibleDescription("\"Software Manipolatore di Matrici\"");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BottoneCreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottoneCreaActionPerformed

        int r = 0, c = 0;
        try {
            r = Integer.valueOf(CampoRighe.getText());
            c = Integer.valueOf(CampoColonne.getText());
            if (r > 0 && c > 0) {
                if (r < 6 && c < 6) {

                    ErroreMsg.setText("");

                    righe = r;
                    colonne = c;
                    MatriceInserimento insert = new MatriceInserimento(r, c, this);
                    insert.DisegnaFrame();
                } else {
                    ErroreMsg.setText("MATRICE SOVRADIMENSIONATA");

                }
            } else {
                ErroreMsg.setText("DATO ERRATO INSERIRE DI NUOVO!!");

            }



        } catch (NumberFormatException e) {
            ErroreMsg.setText("DATO ERRATO INSERIRE DI NUOVO!!");

        }


    }//GEN-LAST:event_BottoneCreaActionPerformed

    private void gaussActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussActionPerformed
        Matrice mat = arrayMatriceCalcolo[0];
        if (mat != null) {
            if (mat.controllaMatrice()) {
                ErroreMsg.setText("MATRICE NULLA OPERAZIONE IMPOSSIBILE");

            } else {
                Matrice trasformata = mat.copiaMatrice();
                trasformata.gauss();
                MatrixCanvas canvasGauss = new MatrixCanvas(mat.riga, mat.colonna, trasformata, this);
                canvasGauss.disegnaMatrice();
                canvasGauss.evidenziaPivot();


            }
        }
    }//GEN-LAST:event_gaussActionPerformed

    private void determinanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_determinanteActionPerformed
        Matrice mat = arrayMatriceCalcolo[0];
        if (mat != null) {
            Matrice trasformata = mat.copiaMatrice();
            trasformata.gauss();
            Frazione determinante1 = new Frazione(1, 1);
            for (int i = 0; i < trasformata.riga; i++) {
                determinante1 = determinante1.moltiplica(trasformata.matrice[i][i]);
            }
            if (trasformata.numscambi % 2 != 0) {
                determinante1.segno = !determinante1.segno;
            }
            determinante1.normalizzaFrazione();
            if (arrayMatriceCalcolo[0].primoZeta != 1) {
                determinante1.trasformaInZetaP(arrayMatriceCalcolo[0].primoZeta);
            }
            dialog.setVisible(true);

            dialog.setTitle("Determinante");
            Image icona = Toolkit.getDefaultToolkit().getImage("/home/raffaele/NetBeansProjects/Eliminazione Gauss/matrixIcon.jpg");
            dialog.setIconImage(icona);
            String det = determinante1.segnoFrazione();
            if (det.length() > 10) {
                dialog.setBounds(450, 350, 380 + (det.length() * 7), 135);
            } else {
                dialog.setBounds(450, 350, 420, 125);
            }
            labelDialog.setBounds(labelDialog.getX(), labelDialog.getY(), 100 + (det.length() * 6), labelDialog.getHeight());
            labelDialog.setForeground(Color.BLUE);
            labelDialog.setText("il valore del determinante è " + det);
        }
    }//GEN-LAST:event_determinanteActionPerformed

    private void CampoRigheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoRigheActionPerformed
        BottoneCreaActionPerformed(evt);
    }//GEN-LAST:event_CampoRigheActionPerformed

    private void traspostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traspostaActionPerformed
        Matrice mat = arrayMatriceCalcolo[0];
        if (mat != null) {
            int rigaT = mat.colonna, colonnaT = mat.riga;
            Frazione trasposta1[][] = new Frazione[rigaT][colonnaT];
            for (int i = 0; i < rigaT; i++) {
                for (int j = 0; j < colonnaT; j++) {
                    trasposta1[i][j] = new Frazione(1, 1);
                    trasposta1[i][j].numeratore = mat.matrice[j][i].numeratore;
                    trasposta1[i][j].denominatore = mat.matrice[j][i].denominatore;
                    trasposta1[i][j].segno = mat.matrice[j][i].segno;
                }
            }
            Matrice Mtrasposta = new Matrice(rigaT, colonnaT, trasposta1);
            if (arrayMatriceCalcolo[0].primoZeta > 1) {
                Mtrasposta.primoZeta = arrayMatriceCalcolo[0].primoZeta;
            }
            MatrixCanvas canvasTrasposta = new MatrixCanvas(rigaT, colonnaT, Mtrasposta, this);
            canvasTrasposta.disegnaMatrice();
        }
    }//GEN-LAST:event_traspostaActionPerformed

    private void CampoColonneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoColonneActionPerformed
        BottoneCreaActionPerformed(evt);
    }//GEN-LAST:event_CampoColonneActionPerformed

    private void CampoColonneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoColonneFocusGained
        CampoColonne.selectAll();
    }//GEN-LAST:event_CampoColonneFocusGained

    private void CampoRigheFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoRigheFocusGained
        CampoRighe.selectAll();
    }//GEN-LAST:event_CampoRigheFocusGained

    private void bottoneOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneOkActionPerformed
        dialog.dispose();
    }//GEN-LAST:event_bottoneOkActionPerformed

    private void inversaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversaActionPerformed
        if (arrayMatriceCalcolo[0].riga >= 5 && arrayMatriceCalcolo[0].colonna >= 5 && arrayMatriceCalcolo[0].primoZeta == 1 && arrayMatriceCalcolo[0].stimaFrazioni()) {
            ErroreMsg.setText("Calcolo troppo oneroso per la tua CPU");
        } else {
            Matrice mat = arrayMatriceCalcolo[0];
            if (mat != null) {
                Matrice trasformata = mat.copiaMatrice();
                trasformata.gauss();
                Frazione determinante1 = new Frazione(1, 1);
                for (int i = 0; i < trasformata.riga; i++) {
                    determinante1 = determinante1.moltiplica(trasformata.matrice[i][i]);
                }
                if (determinante1.numeratore != 0) {
                    Matrice inversa1 = mat.copiaMatrice();
                    inversa1 = inversa1.estendiMatrice();
                    inversa1.gauss();
                    inversa1.dividiPivot();
                    inversa1.GaussDallAlto();
                    Matrice inversa2 = inversa1.estrapolaInversa();
                    MatrixCanvas inversaCanvas = new MatrixCanvas(inversa2.riga, inversa2.colonna, inversa2, this);
                    inversaCanvas.disegnaMatrice();
                } else {
                    dialog.setVisible(true);
                    dialog.setTitle("Inversa");
                    dialog.setBounds(450, 350, 320, 125);
                    labelDialog.setForeground(Color.BLUE);
                    labelDialog.setVisible(true);
                    labelDialog.setText("Matrice NON invertibile");
                    //Image icona=Toolkit.getDefaultToolkit().getImage("/home/raffaele/NetBeansProjects/Eliminazione Gauss/matrixIcon.jpg");
                    //dialog.setIconImage(icona);
                }
            }
        }
    }//GEN-LAST:event_inversaActionPerformed

    private void radioZetaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioZetaPActionPerformed
        ThreadBottoni checkSlider = new ThreadBottoni(this);
        checkSlider.start();
        ErroreMsg.setText("");
        areaTestoPrimo.setEnabled(true);
        areaTestoPrimo.setEditable(true);
        radioZetaP.transferFocus();
    }//GEN-LAST:event_radioZetaPActionPerformed

    private void areaTestoPrimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaTestoPrimoActionPerformed

        String primo = areaTestoPrimo.getText();
        try {
            int p = Integer.parseInt(primo);
            if (p <= 1) {
                ErroreMsg.setText("Valore numerico errato!");
                areaTestoPrimo.setText("");
                areaTestoPrimo.setEnabled(false);
                areaTestoPrimo.setEditable(false);
                radioRazionali.setSelected(true);
            } else if (p >= 100) {
                ErroreMsg.setText("Fuori Range (valore massimo 97)");
                areaTestoPrimo.setText("");
                areaTestoPrimo.setEnabled(false);
                areaTestoPrimo.setEditable(false);
                radioRazionali.setSelected(true);
            } else if (!verificaNumeroPrimo(p)) {
                ErroreMsg.setText("Valore immesso NON è un numero primo");
                areaTestoPrimo.setText("");
                areaTestoPrimo.setEnabled(false);
                areaTestoPrimo.setEditable(false);
                radioRazionali.setSelected(true);
            } else {
                if (arrayMatriceCalcolo[0] == null) {
                    ErroreMsg.setText("Dominio impostato Z " + areaTestoPrimo.getText() + " seleziona o crea una matrice");
                    zetaP = Integer.parseInt(areaTestoPrimo.getText());
                    areaTestoPrimo.setEditable(false);
                    areaTestoPrimo.setEnabled(false);
                } else {
                     for (int i = 0; i < arrayMatriceCalcolo[0].riga; i++)
                        for (int j = 0; j < arrayMatriceCalcolo[0].colonna; j++) {
                            if(canvas[0].matrix[i][j].getBackground() == Color.green)
                                canvas[0].matrix[i][j].setBackground(Color.yellow);
                        }
                    boolean ricerca = false;
                    int r = 0, c = 0;
                    zetaP = Integer.parseInt(areaTestoPrimo.getText());
                    for (int i = 0; i < arrayMatriceCalcolo[0].riga; i++) {
                        for (int j = 0; j < arrayMatriceCalcolo[0].colonna; j++) {
                            if (arrayMatriceCalcolo[0].matrice[i][j].denominatore % zetaP == 0) {
                                ricerca = true;
                                r = i;
                                c = j;
                                break;
                            }
                        }
                    if(ricerca)
                        break;
                    }
                    if (ricerca) {
                        canvas[0].matrix[r][c].setBackground(Color.green);
                        radioRazionali.doClick();
                        ErroreMsg.setForeground(Color.RED);
                        ErroreMsg.setText("Errore riga " + (r+1) + " colonna " + (c+1) + " divisione per classe [0]");
                    } else {
                        ErroreMsg.setText("OK");
                        areaTestoPrimo.setEditable(false);
                        areaTestoPrimo.setEnabled(false);
                        int x = canvas[0].finestraMatrice.getX(), y = canvas[0].finestraMatrice.getY();
                        canvas[0].finestraMatrice.dispose();
                        arrayMatriceCalcolo[0].trasformaInZetaP(zetaP);
                        MatrixCanvas zetaPCanvas = new MatrixCanvas(arrayMatriceCalcolo[0].riga, arrayMatriceCalcolo[0].colonna, arrayMatriceCalcolo[0], this);
                        zetaPCanvas.disegnaMatrice();
                        zetaPCanvas.finestraMatrice.setBounds(x, y, zetaPCanvas.finestraMatrice.getWidth(), zetaPCanvas.finestraMatrice.getHeight());
                        canvas[0] = zetaPCanvas;
                        for (int i = 0; i < arrayMatriceCalcolo[0].riga; i++) {
                            for (int j = 0; j < arrayMatriceCalcolo[0].colonna; j++) {
                                if (zetaPCanvas.matrix[i][j].getBackground() != Color.red) {
                                    zetaPCanvas.matrix[i][j].setBackground(Color.yellow);
                                }
                            }
                        }
                        editorRiepilogo.setText(arrayMatriceCalcolo[0].riepilogo());
                        editorRiepilogo.setCaretPosition(0);
                    }
                }
            }
        } catch (NumberFormatException ex) {
            ErroreMsg.setText("Valore non numerico!");
            areaTestoPrimo.setEditable(false);
            areaTestoPrimo.setText("");
            areaTestoPrimo.setEnabled(false);
            radioRazionali.setSelected(true);
        }
    }//GEN-LAST:event_areaTestoPrimoActionPerformed

    private void ToggleProprietàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleProprietàActionPerformed
        if (ToggleProprietà.isSelected()) {
            dialogRiepilogo.setVisible(true);
        } else {
            dialogRiepilogo.setVisible(false);
        }
    }//GEN-LAST:event_ToggleProprietàActionPerformed

    private void dialogRiepilogoWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogRiepilogoWindowClosing
        ToggleProprietà.doClick();
    }//GEN-LAST:event_dialogRiepilogoWindowClosing

    private void moltiplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moltiplicaActionPerformed
        if (moltiplica.getSelectedObjects() != null) {
            ErroreMsg.setText("Seleziona la seconda matrice o creala e selezionala");
        } else {
            ErroreMsg.setText("");
        }
    }//GEN-LAST:event_moltiplicaActionPerformed

    private void radioRazionaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioRazionaliActionPerformed
        ThreadBottoni checkSlider = new ThreadBottoni(this);
        checkSlider.start();
        ErroreMsg.setText("");
        areaTestoPrimo.setEditable(false);
        areaTestoPrimo.setEnabled(false);
        zetaP = 1;
        if (arrayMatriceCalcolo[0] != null && arrayMatriceCalcolo[0].primoZeta > 1) {
            arrayMatriceCalcolo[0].primoZeta = 1;
            int x = canvas[0].finestraMatrice.getX(), y = canvas[0].finestraMatrice.getY();
            canvas[0].finestraMatrice.dispose();
            MatrixCanvas ridisegna = new MatrixCanvas(arrayMatriceCalcolo[0].riga, arrayMatriceCalcolo[0].colonna, arrayMatriceCalcolo[0], this);
            ridisegna.disegnaMatrice();
            ridisegna.finestraMatrice.setBounds(x, y, ridisegna.finestraMatrice.getWidth(), ridisegna.finestraMatrice.getHeight());
            canvas[0] = ridisegna;
            for (int i = 0; i < arrayMatriceCalcolo[0].riga; i++) {
                for (int j = 0; j < arrayMatriceCalcolo[0].colonna; j++) {
                    if (ridisegna.matrix[i][j].getBackground() != Color.red) {
                        ridisegna.matrix[i][j].setBackground(Color.yellow);
                    }
                }
            }
            editorRiepilogo.setText(arrayMatriceCalcolo[0].riepilogo());
            editorRiepilogo.setCaretPosition(0);
        }

    }//GEN-LAST:event_radioRazionaliActionPerformed

    private void areaTestoPrimoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_areaTestoPrimoFocusGained
        areaTestoPrimo.selectAll();
    }//GEN-LAST:event_areaTestoPrimoFocusGained

    private void toggleSommaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleSommaActionPerformed
        if (toggleSomma.getSelectedObjects() != null) {
            ErroreMsg.setText("Seleziona la seconda matrice o creala e selezionala");
        } else {
            ErroreMsg.setText("");
        }
    }//GEN-LAST:event_toggleSommaActionPerformed

    private void casualeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_casualeActionPerformed
        int r = 0, c = 0;
        try {
            r = Integer.valueOf(CampoRighe.getText());
            c = Integer.valueOf(CampoColonne.getText());
            if (r > 0 && c > 0) {
                if (r < 6 && c < 6) {
                    ErroreMsg.setText("");
                    if (zetaP == 1) {
                        int random = jSlider1.getValue();
                        Matrice temp = creaCasuale(r, c, random, 1);
                        MatrixCanvas casualeCanvas = new MatrixCanvas(r, c, temp, this);
                        casualeCanvas.disegnaMatrice();
                    } else {
                        Matrice temp = creaCasuale(r, c, 0, zetaP);
                        temp.primoZeta = zetaP;
                        MatrixCanvas casualeCanvas = new MatrixCanvas(r, c, temp, this);
                        casualeCanvas.disegnaMatrice();

                    }
                } else {
                    ErroreMsg.setText("operazione sconsigliata per il bene della tua CPU!");
                }
            } else {
                ErroreMsg.setText("DATO ERRATO INSERIRE DI NUOVO!!");
            }
        } catch (NumberFormatException e) {
            ErroreMsg.setText("DATO ERRATO INSERIRE DI NUOVO!!");
        }



    }//GEN-LAST:event_casualeActionPerformed

    private void modificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaActionPerformed
        MatriceInserimento insert = new MatriceInserimento(arrayMatriceCalcolo[0].riga, arrayMatriceCalcolo[0].colonna, this);
        insert.modificaFrame();
        ThreadBottoni check = new ThreadBottoni(this);
        check.start();
        editorRiepilogo.setText("Selezionare una matrice per le proprietà");

    }//GEN-LAST:event_modificaActionPerformed

    private void itemModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemModificaActionPerformed
        modificaActionPerformed(evt);
    }//GEN-LAST:event_itemModificaActionPerformed

    private void itemDeterminanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDeterminanteActionPerformed
        determinanteActionPerformed(evt);
    }//GEN-LAST:event_itemDeterminanteActionPerformed

    private void itemInversaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemInversaActionPerformed
        inversaActionPerformed(evt);
    }//GEN-LAST:event_itemInversaActionPerformed

    private void itemTraspostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTraspostaActionPerformed
        traspostaActionPerformed(evt);
    }//GEN-LAST:event_itemTraspostaActionPerformed

    private void itemGaussActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGaussActionPerformed
        gaussActionPerformed(evt);
    }//GEN-LAST:event_itemGaussActionPerformed

    private void itemSommaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSommaActionPerformed
        toggleSomma.doClick();
    }//GEN-LAST:event_itemSommaActionPerformed

    private void itemProdottoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemProdottoActionPerformed
        moltiplica.doClick();
    }//GEN-LAST:event_itemProdottoActionPerformed

    private void itemCasualeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCasualeActionPerformed
        casualeActionPerformed(evt);
    }//GEN-LAST:event_itemCasualeActionPerformed

    private void itemProprietàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemProprietàActionPerformed
        ToggleProprietà.doClick();
    }//GEN-LAST:event_itemProprietàActionPerformed

    private void itemRazionaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRazionaliActionPerformed
        radioRazionali.doClick();
    }//GEN-LAST:event_itemRazionaliActionPerformed

    private void itemZetaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZetaPActionPerformed
        radioZetaP.doClick();
    }//GEN-LAST:event_itemZetaPActionPerformed

    private void salvaProprietàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaProprietàActionPerformed
        if (selezionaFile.showSaveDialog(this) == selezionaFile.APPROVE_OPTION) {
            File output;
            output = selezionaFile.getSelectedFile();
            PrintWriter printScrivi = null;
            try {
                printScrivi = new PrintWriter(new FileWriter(output), true);
                printScrivi.print(editorRiepilogo.getText());
                ErroreMsg.setText("Salvataggio effettuato");
            } catch (IOException ex) {
                ErroreMsg.setText("Errore Input/Output");
            } finally {
                if (printScrivi != null) {
                    printScrivi.close();
                }

            }



        }
    }//GEN-LAST:event_salvaProprietàActionPerformed

    private void itemSalvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalvaActionPerformed
        if (selezionaFile.showSaveDialog(this) == selezionaFile.APPROVE_OPTION) {
            File output;
            output = selezionaFile.getSelectedFile();
            PrintWriter printScrivi = null;
            try {
                printScrivi = new PrintWriter(new FileWriter(output), true);
                if (arrayMatriceCalcolo[0] != null) {
                    String buffer = "" + arrayMatriceCalcolo[0].riga + "\n" + arrayMatriceCalcolo[0].colonna + "\n" + arrayMatriceCalcolo[0].primoZeta + "\n";
                    for (int i = 0; i < arrayMatriceCalcolo[0].riga; i++) {
                        for (int j = 0; j < arrayMatriceCalcolo[0].colonna; j++) {
                            buffer += arrayMatriceCalcolo[0].matrice[i][j].segnoFrazione();
                            buffer += "\n";
                        }
                    }
                    printScrivi.print(buffer);
                    ErroreMsg.setText("Salvataggio effettuato");
                }
            } catch (IOException ex) {
                ErroreMsg.setText("Errore Input/Output");
            } finally {
                if (printScrivi != null) {
                    printScrivi.close();
                }
            }
        }
    }//GEN-LAST:event_itemSalvaActionPerformed

    private void itemApriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemApriActionPerformed
        if (selezionaFile.showOpenDialog(this) == selezionaFile.APPROVE_OPTION) {
            File input = selezionaFile.getSelectedFile();
            BufferedReader lettoreBuffer = null;
            FileReader lettoreFile = null;
            int r = 0, c = 0, index = 0;
            try {
                lettoreFile = new FileReader(input);
                lettoreBuffer = new BufferedReader(lettoreFile);
                String rigaMatrice = lettoreBuffer.readLine();
                String colonnaMatrice = lettoreBuffer.readLine();
                String dominio = lettoreBuffer.readLine();
                if (rigaMatrice == null || colonnaMatrice == null || dominio == null) {
                    throw new IOException("File Vuoto");
                }
                int rigaFile = Integer.parseInt(rigaMatrice);
                int colonnaFile = Integer.parseInt(colonnaMatrice);
                int dominioFile = Integer.parseInt(dominio);
                if (rigaFile > 5 || colonnaFile > 5 || rigaFile < 1 || colonnaFile < 1 || dominioFile < 1 || dominioFile > 97) {
                    throw new IOException("File corrotto valori riga colonna o dominio errati");
                }
                if (!verificaNumeroPrimo(dominioFile)) {
                    throw new IOException("Valore errato per il dominio");
                }
                Matrice inApertura = new Matrice(rigaFile, colonnaFile, new Frazione[rigaFile][colonnaFile]);
                inApertura.primoZeta = dominioFile;
                String temp = lettoreBuffer.readLine();
                while (temp != null) {
                    if (temp == null) {
                        throw new IOException("valori della matrice mancanti");
                    }
                    for (int i = 0; i < rigaFile; i++) {
                        for (int j = 0; j < colonnaFile; j++) {
                            r = i;
                            c = j;
                            if (temp.contains("/")) {
                                index = temp.indexOf('/');
                                inApertura.matrice[i][j] = new Frazione(Long.valueOf(temp.substring(0, index)), Integer.valueOf(temp.substring(index + 1, temp.length())));
                                controllaDenominatore(inApertura.matrice[i][j]);
                                inApertura.matrice[i][j].normalizzaFrazione();
                                if (inApertura.primoZeta > 1) {
                                    inApertura.matrice[i][j].trasformaInZetaP(inApertura.primoZeta);
                                }
                                temp = lettoreBuffer.readLine();
                                continue;
                            }
                            inApertura.matrice[i][j] = new Frazione(Long.valueOf(temp), 1);
                            if (inApertura.primoZeta > 1) {
                                inApertura.matrice[i][j].trasformaInZetaP(inApertura.primoZeta);
                            }
                            temp = lettoreBuffer.readLine();
                        }
                    }
                }
                MatrixCanvas apertura = new MatrixCanvas(inApertura.riga, inApertura.colonna, inApertura, this);
                apertura.disegnaMatrice();
                ErroreMsg.setVisible(true);
                ErroreMsg.setForeground(Color.BLUE);
                ErroreMsg.setText("Matrice aperta!");

            } catch (DivisionePerZeroException e) {
                ErroreMsg.setForeground(Color.red);
                ErroreMsg.setText("File corrotto divione per zero alla riga " + (r + 1) + " colonna " + (c + 1));
                input = null;

            } catch (NumberFormatException numex) {
                ErroreMsg.setText("valori non numerici o righe vuote trovate");
                input = null;

            } catch (FileNotFoundException ex) {
                ErroreMsg.setText("File Non Trovato!");
                input = null;

            } catch (IOException e) {
                ErroreMsg.setText(e.getMessage());
                input = null;

            } finally {
                if (lettoreBuffer != null) {
                    try {
                        lettoreBuffer.close();
                    } catch (IOException ex) {
                        ErroreMsg.setText("Errore Input/Output in chiusura del Buffer");
                    }
                }
                if (lettoreFile != null) {
                    try {
                        lettoreFile.close();
                    } catch (IOException ex) {
                        ErroreMsg.setText("Errore Input/Output in chiusura del Buffer");

                    }
                }
            }
        }
    }//GEN-LAST:event_itemApriActionPerformed

    private void itemAiutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAiutoActionPerformed
        try {


            BufferedReader lettoreBuffer = null;
            lettoreBuffer = new BufferedReader(new java.io.InputStreamReader(getClass().getResourceAsStream("matrice.txt")));
            String leggi = "";
            String buffer = "";
            while ((leggi = lettoreBuffer.readLine()) != null) {
                buffer += leggi + "\n";
            }
            dialogAiuto.setVisible(true);
            dialogAiuto.setBounds(450, 200, 460, 550);
            editorAiuto.setText(buffer);
            editorAiuto.setCaretPosition(0);
        } catch (FileNotFoundException ex) {
            ErroreMsg.setText("File non trovato");

        } catch (IOException e) {
            ErroreMsg.setText("Errore di Input/Output");

        }
    }//GEN-LAST:event_itemAiutoActionPerformed

    private boolean verificaNumeroPrimo(int n) {
        if (n == 2 || n == 3) {
            return true;
        }
        int i = 2;
        while (i <= n / 2) {
            if (n % i == 0) {
                return false;
            }
            i++;
        }
        return true;
    }

    Matrice creaCasuale(int r, int c, int random, int dominio) {
        Frazione[][] casuale = new Frazione[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                int randomNum = (int) (Math.random() * 10), randomDen = (int) (Math.random() * random), randomSegno = (int) (Math.random() * 20);
                randomDen++;
                if ((randomSegno + 1) % 2 != 0) {
                    randomNum *= (-1);
                }
                casuale[i][j] = new Frazione(randomNum, randomDen);
                casuale[i][j].normalizzaFrazione();
                if (dominio > 1) {
                    casuale[i][j].trasformaInZetaP(dominio);
                }

            }
        }
        return new Matrice(r, c, casuale);


    }

    public void controllaDenominatore(Frazione f) throws DivisionePerZeroException {
        if (f.denominatore == 0) {
            throw new DivisionePerZeroException();
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FrameMatrice master = new FrameMatrice();
                Image icona = Toolkit.getDefaultToolkit().getImage("/home/raffaele/NetBeansProjects/Eliminazione Gauss/matrixIcon.jpg");
                master.setIconImage(icona);
                master.setVisible(true);
                master.setExtendedState(MAXIMIZED_BOTH);



            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BottoneCrea;
    private javax.swing.JTextField CampoColonne;
    private javax.swing.JTextField CampoRighe;
    private javax.swing.JLabel DimMatrice;
    public javax.swing.JLabel ErroreMsg;
    private javax.swing.JLabel LabelColonne;
    private javax.swing.JLabel LabelRighe;
    public javax.swing.JToggleButton ToggleProprietà;
    public javax.swing.JTextField areaTestoPrimo;
    private javax.swing.JButton bottoneOk;
    private javax.swing.JButton casuale;
    public javax.swing.JButton determinante;
    public javax.swing.JDialog dialog;
    private javax.swing.JDialog dialogAiuto;
    public javax.swing.JDialog dialogRiepilogo;
    private javax.swing.JEditorPane editorAiuto;
    public javax.swing.JEditorPane editorRiepilogo;
    public javax.swing.JButton gauss;
    private javax.swing.ButtonGroup gruppoRadioDominio;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel iconaLabelProd;
    public javax.swing.JButton inversa;
    private javax.swing.JMenuItem itemAiuto;
    private javax.swing.JMenuItem itemApri;
    public javax.swing.JMenuItem itemCasuale;
    public javax.swing.JMenuItem itemDeterminante;
    public javax.swing.JMenuItem itemGauss;
    public javax.swing.JMenuItem itemInversa;
    public javax.swing.JMenuItem itemModifica;
    public javax.swing.JMenuItem itemProdotto;
    public javax.swing.JMenuItem itemProprietà;
    private javax.swing.JMenuItem itemRazionali;
    public javax.swing.JMenuItem itemSalva;
    public javax.swing.JMenuItem itemSomma;
    public javax.swing.JMenuItem itemTrasposta;
    private javax.swing.JMenuItem itemZetaP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    public javax.swing.JSlider jSlider1;
    public javax.swing.JLabel labelDialog;
    private javax.swing.JLabel labelDominio;
    private javax.swing.JLabel labelIconaRazionali;
    private javax.swing.JLabel labelInteri;
    private javax.swing.JLabel labelNumPrimo;
    private javax.swing.JMenu menuFile;
    public javax.swing.JButton modifica;
    private javax.swing.JMenu modificaMenu;
    public javax.swing.JToggleButton moltiplica;
    public javax.swing.JRadioButton radioRazionali;
    public javax.swing.JRadioButton radioZetaP;
    public javax.swing.JButton salvaProprietà;
    private javax.swing.JFileChooser selezionaFile;
    private javax.swing.JLabel titoloRiepilogo;
    public javax.swing.JToggleButton toggleSomma;
    public javax.swing.JButton trasposta;
    // End of variables declaration//GEN-END:variables
}
